
"""
Scans router (1 ZIP = 1 –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ).

- POST /api/scans            ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ ZIP (–≤–∞–ª–∏–¥–∏—Ä—É–µ–º, —á—Ç–æ —ç—Ç–æ zip)
- GET  /api/scans            ‚Äî —Å–ø–∏—Å–æ–∫
- GET  /api/scans/{id}       ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞
- PUT  /api/scans/{id}       ‚Äî –ø—Ä–∞–≤–∫–∞ description
- DELETE /api/scans/{id}     ‚Äî —É–¥–∞–ª–∏—Ç—å
- GET  /api/scans/{id}/file  ‚Äî —Å–∫–∞—á–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π ZIP
- POST /api/scans/{id}/analyze
    –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ ZIP, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª—å—é, —Å–±–æ—Ä –æ—Ç—á—ë—Ç–∞ –ø–æ –¢–ó:
    [
      {
        "path_to_study": str,
        "study_uid": str,
        "series_uid": str,
        "probability_of_pathology": float,
        "pathology": 0|1,
        "processing_status": "Success"|"Failure",
        "time_of_processing": float
      }, ...
    ]
    -> —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ scans.report_json (JSONB array) –∏ scans.report_xlsx (BYTEA).
- GET /api/scans/{id}/report
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { "rows": [...], "summary": { "has_pathology_any": bool } }
"""

import io
import time
import zipfile
from typing import Dict, List, Optional
from uuid import UUID
import os

from fastapi import APIRouter, File, Form, HTTPException, Query, Response, UploadFile
from openpyxl import Workbook
from psycopg.types.json import Json
import tempfile
from pathlib import Path

from backend.app.ml.file_handler import process_uploaded_file
from backend.app.ml.model_loader import load_pathology_model, load_pathology_threshold
from backend.app.ml.sequence_classifier import load_slowfast_model
from backend.app.schemas.schemas import ListResponse, ScanOut, ScanUpdate

from pathlib import Path

BACKEND_DIR = Path(__file__).resolve().parents[2]   # .../backend
MODELS_DIR = BACKEND_DIR / "models"

# pydicom ‚Äî –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è UID'–æ–≤ (study/series); —Ä–∞–±–æ—Ç–∞–µ–º –º—è–≥–∫–æ, –µ—Å–ª–∏ –ø–∞–∫–µ—Ç–∞ –Ω–µ—Ç.
try:
    import pydicom  # type: ignore
except Exception:  # pragma: no cover
    pydicom = None


def create_router(db):
    router = APIRouter(prefix="/scans", tags=["scans"])

    # ---------- helpers ----------

    def _safe_dicom_uids(file_bytes: bytes) -> tuple[str, str]:
        """–í–µ—Ä–Ω—ë—Ç (study_uid, series_uid) –µ—Å–ª–∏ —ç—Ç–æ DICOM; –∏–Ω–∞—á–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏."""
        if pydicom is None:
            return "", ""
        try:
            ds = pydicom.dcmread(io.BytesIO(file_bytes), stop_before_pixels=True, force=True)
            study_uid = str(getattr(ds, "StudyInstanceUID", "") or "")
            series_uid = str(getattr(ds, "SeriesInstanceUID", "") or "")
            return study_uid, series_uid
        except Exception:
            return "", ""

    def _build_xlsx(rows: List[Dict]) -> bytes:
        """–°–æ–±–∏—Ä–∞–µ–º XLSX-—Ç–∞–±–ª–∏—Ü—É —Ä–æ–≤–Ω–æ —Å —Ç—Ä–µ–±—É–µ–º—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏."""
        wb = Workbook()
        ws = wb.active
        ws.title = "Report"
        ws.append(
            [
                "path_to_study",
                "study_uid",
                "series_uid",
                "probability_of_pathology",
                "pathology",
                "processing_status",
                "time_of_processing",
            ]
        )
        for r in rows:
            ws.append(
                [
                    r.get("path_to_study", ""),
                    r.get("study_uid", ""),
                    r.get("series_uid", ""),
                    float(r.get("probability_of_pathology", 0.0)),
                    int(r.get("pathology", 0)),
                    r.get("processing_status", "Failure"),
                    float(r.get("time_of_processing", 0.0)),
                ]
            )
        bio = io.BytesIO()
        wb.save(bio)
        return bio.getvalue()

    # --- –ª–µ–Ω–∏–≤—ã–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω—ã –º–æ–¥–µ–ª–∏ –∫–æ–ª–ª–µ–≥–∏ ---
    _cls_model = {"obj": None}
    _seq_model = {"obj": None}
    _threshold = {"val": None}
    DEVICE = "cpu"  # –ø–æ–º–µ–Ω—è–π –Ω–∞ "cuda", –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ GPU

    def _ensure_models():
        if _cls_model["obj"] is None:
            _cls_model["obj"] = load_pathology_model(MODELS_DIR / "pathology_classifier.pth", device=DEVICE)
            _cls_model["obj"].eval()

            # üöÄ –°–∞–º–æ—Ç–µ—Å—Ç
            import torch, time
            x = torch.zeros(1, 1, 224, 224, dtype=torch.float32, device=DEVICE)
            t0 = time.perf_counter()
            with torch.no_grad():
                y = _cls_model["obj"](x)
            print(f"[SANITY] forward ok, logits.shape={tuple(y.shape)}, {time.perf_counter() - t0:.4f}s")


        if _threshold["val"] is None:
            _threshold["val"] = float(load_pathology_threshold(MODELS_DIR / "pathology_threshold_f1.pkl"))
        if _seq_model["obj"] is None:
            try:
                _seq_model["obj"] = load_slowfast_model(MODELS_DIR / "slowfast.ckpt", device=DEVICE)
            except Exception:
                _seq_model["obj"] = None


    # ---------- CRUD ----------

    @router.get("", response_model=ListResponse)
    def list_scans(
        patient_id: Optional[UUID] = Query(None),
        limit: int = Query(20, ge=1, le=100),
        offset: int = Query(0, ge=0),
    ):
        where_sql, params = "", []
        if patient_id:
            where_sql, params = " WHERE patient_id = %s", [str(patient_id)]

        total = int(db.scalar(f"SELECT COUNT(*) FROM scans{where_sql}", params) or 0)
        rows = db.fetch_all(
            f"""SELECT id, patient_id, description, file_name, created_at, updated_at
                FROM scans{where_sql}
                ORDER BY created_at DESC
                LIMIT %s OFFSET %s
            """,
            params + [limit, offset],
        )
        return ListResponse(items=rows, total=total, limit=limit, offset=offset)

    @router.get("/{id}", response_model=ScanOut)
    def get_scan(id: UUID):
        row = db.fetch_one(
            """SELECT id, patient_id, description, file_name, created_at, updated_at
               FROM scans WHERE id = %s
            """,
            [str(id)],
        )
        if not row:
            raise HTTPException(404, "Scan not found")
        return row

    @router.post("", status_code=201)
    def create_scan(
        patient_id: UUID = Form(...),
        file: UploadFile = File(...),
        description: Optional[str] = Form(None),
    ):
        # –ø–∞—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        exists = db.fetch_one("SELECT 1 FROM patients WHERE id = %s", [str(patient_id)])
        if not exists:
            raise HTTPException(404, "Patient not found")

        # 2) —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª
        try:
            content = file.file.read()  # bytes
        except Exception:
            raise HTTPException(400, "Failed to read uploaded file")

        if not content:
            raise HTTPException(400, "Empty file")

        # 3) –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è (–±–µ–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π), –±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ .zip
        orig_name = os.path.basename((file.filename or "").strip()) or "upload.bin"

        row = db.execute_returning(
            """INSERT INTO scans (patient_id, description, file_name, file_bytes)
               VALUES (%s, %s, %s, %s)
               RETURNING id
            """,
            [str(patient_id), description, orig_name, content],
        )
        return {"id": str(row["id"])}

    @router.put("/{id}", response_model=ScanOut)
    def update_scan(id: UUID, payload: ScanUpdate):
        data = payload.model_dump(exclude_unset=True)
        if not data:
            # –æ—Ç–¥–∞—ë–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ –º–µ–Ω—è—Ç—å
            row = db.fetch_one(
                """SELECT id, patient_id, description, file_name, created_at, updated_at
                   FROM scans WHERE id = %s
                """,
                [str(id)],
            )
            if not row:
                raise HTTPException(404, "Scan not found")
            return row

        sets, params = [], []
        if "description" in data:
            sets.append("description = %s")
            params.append(data["description"])
        params.append(str(id))

        row = db.execute_returning(
            f"""UPDATE scans SET {', '.join(sets)}, updated_at = NOW()
                WHERE id = %s
                RETURNING id, patient_id, description, file_name, created_at, updated_at
            """,
            params,
        )
        if not row:
            raise HTTPException(404, "Scan not found")
        return row

    @router.delete("/{id}", status_code=204)
    def delete_scan(id: UUID):
        affected = db.execute("DELETE FROM scans WHERE id = %s", [str(id)])
        if affected == 0:
            raise HTTPException(404, "Scan not found")

    @router.get("/{id}/file")
    def download_scan_file(id: UUID):
        row = db.fetch_one("SELECT file_bytes, file_name FROM scans WHERE id = %s", [str(id)])
        if not row:
            raise HTTPException(404, "Scan not found")
        headers = {"Content-Disposition": f'attachment; filename="{row["file_name"]}"'}
        return Response(content=row["file_bytes"], media_type="application/octet-stream", headers=headers)

    # ---------- –∞–Ω–∞–ª–∏–∑ ZIP + —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ ----------

    @router.post("/{id}/analyze")
    def analyze_scan(id: UUID):

        row = db.fetch_one("SELECT file_name, file_bytes FROM scans WHERE id=%s", [str(id)])
        if not row:
            raise HTTPException(404, "Scan not found")

        zip_name: str = row["file_name"]
        zip_bytes: bytes = row["file_bytes"]

        _ensure_models()

        # –ü–∏—à–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫ –∏ –æ—Ç–¥–∞—ë–º –º–æ–¥—É–ª—é –∫–æ–ª–ª–µ–≥–∏ "–∫–∞–∫ –µ—Å—Ç—å"
        with (tempfile.TemporaryDirectory(prefix="scan_zip_") as tmpdir):
            tmpdir_path = Path(tmpdir)
            safe_name = Path(zip_name).name
            zip_path = tmpdir_path / safe_name
            zip_path.write_bytes(zip_bytes)

            # –µ–¥–∏–Ω—ã–π –≤—Ö–æ–¥: —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å zip/dcm/png/jpg/nii ‚Äî –º–æ–¥—É–ª—å —Å–∞–º —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è
            try:

                result = process_uploaded_file(file_location = str(zip_path),
                                               temp_dir = str(tmpdir_path),
                                               classification_model = _cls_model["obj"],
                                               sequence_model = _seq_model["obj"],
                                               val_transform = None,
                                               threshold = _threshold["val"],
                                               device = DEVICE)

                print(result)

            except Exception:
                result = {"classification_results": [], "processing_time": 0.0}

        # --- –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–ª–ª–µ–≥–∏ -> –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –æ—Ç—á—ë—Ç–∞ –Ω–∞ —Ñ–∞–π–ª ---
        raw = result or {}

        # –î–æ—Å—Ç–∞—ë–º items –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
        items = raw.get("classification_results") or raw.get("items")
        if items is None:
            maybe_results = raw.get("results")
            if isinstance(maybe_results, dict) and "items" in maybe_results:
                items = maybe_results["items"]
            else:
                items = maybe_results  # –≤–¥—Ä—É–≥ —É–∂–µ —Å–ø–∏—Å–æ–∫

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ —Å–ø–∏—Å–∫—É
        if isinstance(items, dict):
            items = [items]
        if not isinstance(items, list):
            items = []

        if not items:
            rows = [{
                "path_to_study": zip_name,
                "study_uid": "",
                "series_uid": "",
                "probability_of_pathology": 0.0,
                "pathology": 0,
                "processing_status": "Failure",
                "time_of_processing": float(raw.get("processing_time", 0.0) or 0.0),
            }]
        else:
            success_items = [it for it in items if not it.get("error")]
            pathology_any = False
            best_prob = 0.0

            def _to_float(v, default=0.0):
                try:
                    return float(v)
                except (TypeError, ValueError):
                    return default

            for it in items:
                it_type = it.get("type")
                if it_type == "sequence":
                    p = _to_float(it.get("sequence_confidence", it.get("probability")))
                    pred_path = (it.get("sequence_prediction") == "–ü–∞—Ç–æ–ª–æ–≥–∏—è") or (it.get("prediction") == "–ü–∞—Ç–æ–ª–æ–≥–∏—è")
                else:
                    p = _to_float(it.get("probability", it.get("confidence")))
                    pred_path = (it.get("prediction") == "–ü–∞—Ç–æ–ª–æ–≥–∏—è")

                if p > best_prob:
                    best_prob = p
                if pred_path:
                    pathology_any = True

            total_time = raw.get("processing_time")
            if total_time is None:
                total_time = sum(_to_float(it.get("processing_time")) for it in items)

            # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤–æ–∑—å–º—ë–º –ø—É—Ç—å –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —É–¥–∞—á–Ω–æ–≥–æ –∞–π—Ç–µ–º–∞, –∏–Ω–∞—á–µ –∏–º—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            src_path = (success_items[0].get("file") or success_items[0].get("path")) if success_items else zip_name

            rows = [{
                "path_to_study": str(src_path or zip_name),
                "study_uid": "",
                "series_uid": "",
                "probability_of_pathology": max(0.0, min(1.0, best_prob)),
                "pathology": 1 if pathology_any else 0,
                "processing_status": "Success" if success_items else "Failure",
                "time_of_processing": float(total_time or 0.0),
            }]

        # --- –¥–∞–ª—å—à–µ –∫–∞–∫ –±—ã–ª–æ ---
        xlsx_bytes = _build_xlsx(rows)
        db.execute(
            """UPDATE scans
               SET report_json=%s,
                   report_xlsx=%s,
                   updated_at=NOW()
             WHERE id=%s
            """,
            [Json(rows), xlsx_bytes, str(id)],
        )

        has_pathology_any = any(
            (int(r.get("pathology", 0)) == 1) and (r.get("processing_status") == "Success") for r in rows
        )

        return {
            "ok": True,
            "files_processed": 1,  # <-- –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —Ñ–∞–π–ª
            "has_pathology_any": has_pathology_any
        }

    @router.get("/{id}/report")
    def scan_report(id: UUID):
        row = db.fetch_one("SELECT report_json FROM scans WHERE id=%s", [str(id)])
        if not row:
            raise HTTPException(404, "Scan not found")

        rows = row["report_json"] or []
        has_pathology_any = any((int(r.get("pathology", 0)) == 1) and (r.get("processing_status") == "Success") for r in rows)
        return {"rows": rows, "summary": {"has_pathology_any": has_pathology_any}}

    return router
